#include <behaviors.dtsi>
#include <input/processors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <layout_shift.dtsi>

// #includeのあとのあたりにスクロール量変更の定義を追記
#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

#define LEFT_HAND_KEYS   \
     0  1  2  3  4       \
    10 11 12 13 14 15    \
    22 23 24 25 26 27    \
    34 35 36

#define RIGHT_HAND_KEYS  \
                             5  6  7  8  9 \
                         16 17 18 19 20 21 \
                         28 29 30 31 32 33 \
                                        42

#define LEFT_THUMB_KEYS  \
             37 38 39 

#define RIGHT_THUMB_KEYS \
                         40 41

#define L_US_DEFAULT 0
#define L_JIS_DEFAULT 1
#define L_MOUSE 2
#define L_NUM 3
#define L_SYMBOL 4
#define L_ARROW 5
#define L_FUNCTION 6

// OS設定を日本語キーボードのまま使用するための変換定義
#define JP_DQUOTE       AT                // "
#define JP_AMPERSAND    CARET             // &
#define JP_QUOTE        AMPERSAND         // '
#define JP_EQUAL        UNDER             // =
#define JP_CARET        EQUAL             // ^
#define JP_YEN          0x89              // ¥
#define JP_PLUS         COLON             // +
#define JP_TILDE        PLUS              // ~
#define JP_PIPE         LS(0x89)          // |
#define JP_AT           LEFT_BRACKET      // @
#define JP_COLON        SINGLE_QUOTE      // :
#define JP_ASTERISK     DOUBLE_QUOTES     // *
#define JP_UNDERSCORE   LS(0x87)          // _
#define JP_GRAVE        LS(LEFT_BRACE)    // `
#define JP_LBRACKET     RIGHT_BRACKET     // [
#define JP_RBRACKET     BACKSLASH         // ]
#define JP_LPAREN       ASTERISK          // (
#define JP_RPAREN       LEFT_PARENTHESIS  // )
#define JP_LBRACE       RIGHT_BRACE       // {
#define JP_RBRACE       PIPE              // }
#define JP_KANA         LANGUAGE_1        // かな
#define JP_EISU         LANGUAGE_2        // 英数
#define JP_HANZEN       GRAVE             // 半角/全角

&mt {
    flavor = "balanced";
    tapping-term-ms = <165>;
    quick-tap-ms = <165>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <165>;
    quick-tap-ms = <165>;
};

/*
&sl {
    release-after-ms = <250>;  // ダブルクリックに必要な時間を設定
};
*/

&mkp_input_listener {
    input-processors = <&zip_temp_layer L_MOUSE 10000>;
};

/ {
    /*
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };

        alt_tab {
            bindings = <&app_switch>;
            key-positions = <11 36>;
        };

        win_tab {
            bindings = <&task_switch>;
            key-positions = <10 36>;
        };
    };
    */

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        lt_aml_off_and_mo: lt_aml_off_and_mo {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings
                = <&macro_tap>
                , <&tog_off L_MOUSE>
                , <&macro_param_1to1>
                , <&macro_press &mo MACRO_PLACEHOLDER>
                , <&macro_pause_for_release>
                , <&macro_param_1to1>
                , <&macro_release &mo MACRO_PLACEHOLDER>            
                ;
            label = "LT_AML_OFF_AND_MO";
        };

        exit_AML: exit_AML {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&tog_off L_MOUSE>;
            label = "exit_AML";
        };

        kp_exit_AML: kp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &exit_AML>;
            label = "KP_exit_AML";
        };

        /*
        mkp_exit_AML: mkp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings
                = <&macro_press>
                , <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>
                , <&macro_pause_for_release>
                , <&macro_release>
                , <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>
                , <&macro_tap>
                , <&sl L_MOUSE>
                ;
            label = "MKP_EXIT_AML";
        };
        */

        to_us_default_layer: to_us_default_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap>
                , <&tog_off L_JIS_DEFAULT>
                , <&to L_US_DEFAULT>
                , <&tog_ls_off>
                ;
            label = "TO_US_DEFAULT_LAYER";
        };

        to_jis_default_layer: to_jis_default_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap>
                , <&tog_on L_JIS_DEFAULT>
                , <&to L_JIS_DEFAULT>
                , <&tog_ls_on>
                ;
            label = "TO_JIS_DEFAULT_LAYER";
        };

        app_switch: app_switch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <100>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp TAB>
                , <&macro_tap     &sk LALT>
                , <&macro_release &kp LALT>
                ;
            label = "APP_SWITCH";
        };

        task_switch: task_switch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <100>;
            bindings
                = <&macro_press   &kp LGUI>
                , <&macro_tap     &kp TAB>
                , <&macro_tap     &sk LGUI>
                , <&macro_release &kp LGUI>
                ;
            label = "TASK_SWITCH";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            display-name = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <165>;
        };

        lt_aml_off: lt_aml_off {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&lt_aml_off_and_mo>, <&kp>;
            tapping-term-ms = <165>;
            display-name = "LT_AML_OFF";
        };

        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        tog_on: toggle_layer_on_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer On";
            toggle-mode = "on";
        };

        tog_off: toggle_layer_off_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };

        mt_exit_AML_on_tap: mt_exit_AML_on_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_exit_AML_ON_TAP";
            bindings = <&kp>, <&kp_exit_AML>;

            #binding-cells = <2>;
            tapping-term-ms = <165>;
            flavor = "balanced";
            quick-tap-ms = <165>;
        };

        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS RIGHT_THUMB_KEYS>; // List of keys on the right side of the keyboard
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <LEFT_HAND_KEYS LEFT_THUMB_KEYS>; // List of keys on the left side of the keyboard
            hold-trigger-on-release;
        };

        // combosやmacrosと同じ階層に以下のbehaviorsを追記
        // スクロール方向を逆にしたい場合は <&msc SCRL_DOWN> と <&msc SCRL_UP> を入れ替えてください
        mouse_wheel_scrl: mouse_wheel_scrl {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&msc>, <&msc>;
            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        US_DEFAULT_LAYER {
            bindings = <
&kp Q            &kp W            &kp E                              &kp R                                &kp T                                                                &kp Y             &kp U                                &kp I                               &kp O            &lt_aml_off L_SYMBOL P
&mt LEFT_GUI A   &mt LEFT_ALT S   &mt_exit_AML_on_tap LEFT_SHIFT D   &mt_exit_AML_on_tap LEFT_CONTROL F   &kp G                        &kp LS(LG(S))               &kp HOME    &kp H             &mt_exit_AML_on_tap LEFT_CONTROL J   &mt_exit_AML_on_tap RIGHT_SHIFT K   &mt LEFT_ALT L   &lt L_ARROW MINUS
&kp Z            &kp X            &kp C                              &kp V                                &kp B                        &kp ESC                     &kp END     &kp N             &kp M                                &kp COMMA                           &kp DOT          &kp SLASH
&mo L_FUNCTION   &caps_word       &kp TAB                            &lt L_NUM LANGUAGE_2                 &lt_aml_off L_SYMBOL SPACE   &lt L_ARROW LANGUAGE_1      &bspc_del   &lt L_NUM ENTER                                                                                             &to_jis_default_layer
            >;

            sensor-bindings = <&mouse_wheel_scrl SCRL_UP SCRL_DOWN>;
        };

        JIS_DEFAULT_LAYER {
            bindings = <
&kp Q            &kp W            &kp E                              &kp R                                &kp T                                                                &kp Y             &kp U                                &kp I                               &kp O            &lt_aml_off L_SYMBOL P
&mt LEFT_GUI A   &mt LEFT_ALT S   &mt_exit_AML_on_tap LEFT_SHIFT D   &mt_exit_AML_on_tap LEFT_CONTROL F   &kp G                        &kp LS(LG(S))               &kp HOME    &kp H             &mt_exit_AML_on_tap LEFT_CONTROL J   &mt_exit_AML_on_tap RIGHT_SHIFT K   &mt LEFT_ALT L   &lt L_ARROW MINUS
&kp Z            &kp X            &kp C                              &kp V                                &kp B                        &kp ESC                     &kp END     &kp N             &kp M                                &kp COMMA                           &kp DOT          &kp SLASH
&mo L_FUNCTION   &caps_word       &kp TAB                            &lt L_NUM LANGUAGE_2                 &lt_aml_off L_SYMBOL SPACE   &lt L_ARROW LANGUAGE_1      &bspc_del   &lt L_NUM ENTER                                                                                             &to_us_default_layer
            >;

            sensor-bindings = <&mouse_wheel_scrl SCRL_UP SCRL_DOWN>;
        };

        MOUSE {
            bindings = <
&kp ESC            &trans           &trans   &trans             &trans                        &trans   &trans      &trans      &trans      &trans
&trans             &trans           &trans   &trans             &trans   &trans      &trans   &trans   &trans      &trans      &trans      &trans
&trans             &trans           &trans   &trans             &trans   &trans      &trans   &trans   &mkp LCLK   &mkp MCLK   &mkp RCLK   &trans   
&kp LEFT_CONTROL   &kp LEFT_SHIFT   &trans   &tog_off L_MOUSE   &trans   &trans      &trans   &trans                                       &trans
            >;

            sensor-bindings = <&mouse_wheel_scrl SCRL_UP SCRL_DOWN>;
        };

        NUM {
            bindings = <
&kp F6            &kp F7   &kp F8   &kp F9    &kp F10                                                   &kp COMMA      &kp NUMBER_7   &kp NUMBER_8   &kp NUMBER_9   &kp NUMBER_0
&kp PRINTSCREEN   &kp F2   &kp F3   &kp F4    &kp F5    &kp LC(LA(KP_NUMBER_0))      &trans             &kp DOT        &kp NUMBER_4   &kp NUMBER_5   &kp NUMBER_6   &kp MINUS
&trans            &trans   &trans   &kp F11   &kp F12   &trans                       &kp LEFT_CONTROL   &kpls COLON    &kp NUMBER_1   &kp NUMBER_2   &kp NUMBER_3   &kp SLASH
&trans            &trans   &trans   &trans    &trans    &trans                       &trans             &trans                                                      &kp F1
            >;
        };

        SYMBOL {
            bindings = <
&kp QUESTION      &kp LESS_THAN   &kp GREATER_THAN   &kp SEMICOLON     &kpls GRAVE                                &kpls AMPERSAND   &kpls LEFT_BRACKET       &kpls RIGHT_BRACKET       &kpls UNDERSCORE   &kp PERCENT
&kp EXCLAMATION   &kp MINUS       &kpls EQUAL        &kpls PLUS        &kpls SINGLE_QUOTE    &trans      &trans   &kpls PIPE        &kpls LEFT_PARENTHESIS   &kpls RIGHT_PARENTHESIS   &kpls COLON        &kp HASH
&kpls CARET       &kp SLASH       &kpls ASTERISK     &kpls BACKSLASH   &kpls DOUBLE_QUOTES   &trans      &trans   &kpls TILDE       &kpls LEFT_BRACE         &kpls RIGHT_BRACE         &kp DOLLAR         &kpls AT_SIGN
&trans            &trans          &trans             &trans            &trans                &trans      &trans   &trans                                                                                  &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESC           &kp LG(SPACE)   &kp END        &kp LC(END)  &trans                               &trans         &kp HOME         &kp UP_ARROW     &kp END           &none
&kp HOME          &kp LC(HOME)    &kp PAGE_UP    &kp LC(F3)   &kp LA(F5)  &trans      &trans       &kp BACKSPACE  &kp LEFT_ARROW   &kp DOWN_ARROW   &kp RIGHT_ARROW   &none
&none             &none           &kp PAGE_DOWN  &none        &trans      &trans      &trans       &kp DEL        &none            &none            &none             &none
&kp LEFT_CONTROL  &kp LEFT_SHIFT  &kp LG(TAB)    &trans       &trans      &trans      &key_repeat  &trans                                                             &kp K_MUTE
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        FUNCTION {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &trans        &trans        &trans        &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
